package Problem;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;

class ArrayNumber implements Comparable<ArrayNumber>{
	ArrayList<Integer> nums;
	int size;
	ArrayNumber(ArrayList<Integer> temp){
		nums = (ArrayList<Integer>) temp.clone();
		size = nums.size();
	}
	@Override
	public int compareTo(ArrayNumber o) {
		if( this.size == o.size ){
			for( int i = 0 ; i < this.size; i++ ){
				if( this.nums.get(i) != o.nums.get(i)){
					return this.nums.get(i) - o.nums.get(i);
				}
			}
			return 0;
		}
		return this.size - o.size;
	}
	@Override
	public String toString() {
		return "ArrayNumber [nums=" + nums + "]";
	}
	
}


public class Bignumber{
	int[] array;
	int   sizeOfArray;
	HashMap<Integer,ArrayNumber> maxList = new HashMap<Integer,ArrayNumber>();
	Bignumber(){
		
	}
	Bignumber(int[] nums){
		array = nums.clone();
		sizeOfArray = nums.length;
		int size = nums.length;
		maxList.put(0, new ArrayNumber(new ArrayList<Integer>()));
		for( int i = 1; i <= size ; i++ ){
			if( !maxList.containsKey(i)){
				maxList.put(i, new ArrayNumber(SetBigNumberForLengthK(0,size - 1,i)));
			}
			
		}
		System.out.println(maxList.toString());
	}
	public ArrayList<Integer> SetBigNumberForLengthK(int start, int end, int length){
		ArrayList<Integer> temp = null;
		int need = length;
		if( need == 1 ){
			temp = new ArrayList<Integer>();
			int pos = FindMaxPos(start,end);
			temp.add(pos);
			return temp;
		}
		int size = end - start + 1;
		ArrayList<Integer> newTemp = null;
		if( size == length ){
			newTemp = new ArrayList<Integer>();
			for( int i = start; i <=end; i++){
				newTemp.add(i);
			}
			return newTemp;
		}
		temp = maxList.get(length - 1).nums;
		
		newTemp = (ArrayList<Integer>) temp.clone();
		
		
		for( int i = newTemp.size() - 1 ; i >= 0 ;i--){
			int last = newTemp.get(i);
			if( last < start || last+need > end){
				newTemp.remove(i);
				need++;
			}
			else{
				break;
			}
		}
		if( newTemp.isEmpty()){
			int last = end-length + 1;
			int pos = FindMaxPos(start,last);
			newTemp.add(pos);
			
		}
		need = length - newTemp.size();
		int lastIndex = newTemp.get(newTemp.size() - 1);
		newTemp.addAll(SetBigNumberForLengthK(lastIndex + 1, end,need));
		return newTemp;
	}
	private int FindMaxPos(int start, int end) {
		int index = start;
		int max = array[index];
		
		for( int i = start + 1; i<=end; i++){
			if( max < array[i]){
				max = array[i];
				index = i;
			}
		}
		return index;
	}
	public ArrayList<Integer> getMaxNumber(int[] array1, int[] array2, int size) {
		int size1 = array1.length;
		int size2 = array2.length;
		if( size1 < size2 ){
			return getMaxNumber(array2,array1,size);
		}
		ArrayList<Integer> result = new ArrayList<Integer>();
		int start1 = 0;
		int start2 = 0;
		int end1 = size1 - 1;
		int end2 = size2 - 1;
		int k = size;
		boolean flag1 = false;
		boolean flag2 = false;
		while(k > 0){
			if(!flag1){
				if( k - (size2 - start2 ) < 2 ){
					end1 = size1 - 1;
				}
				else{
					end1 = size2 - (k - size2 + start2) ;
				}
			}
			if(!flag2){
				if( k - (size1 - start1 ) < 2 ){
					end2 = size2 - 1;
				}
				else{
					end2 = size1 - (k - size1 + start1) ;
				}
			}
			
			int pos1 = GetMaxPos(array1,start1,end1);
			int pos2 = GetMaxPos(array2,start2,end2);
			if( array1[pos1] > array2[pos2]){
				result.add(array1[pos1]);
				start1 = pos1 + 1;
				flag2 = true;
			}
			else{
				result.add(array2[pos2]);
				start2 = pos2 + 1;
				flag1 = true;
			}
			System.out.println(result.toString());
			k--;
		}
		return result;
	}
	
	private int GetMaxPos(int[] Array, int start, int end){
		System.out.println("start: "+start + " end:"+ end);
		int index = start;
		int max = Array[index];
		for( int i = start + 1 ; i <=end;i++){
			if( max < Array[i]){
				index = i;
				max = Array[i];
			}
		}
		return index;
	}
	
	
	
}
